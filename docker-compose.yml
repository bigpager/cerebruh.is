# Base configurations
x-base-service: &base-service
  mem_limit: 512m
  cpus: 0.5
  restart: unless-stopped
  environment: &common-env
    REDIS_HOST: redis
    DATA_ROOT: /app/data
    NODE_ENV: ${NODE_ENV:-development}

x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"

# Common configurations
x-service-base: &service-defaults
  <<: [*base-service, *default-logging]
  env_file:
    - .env
  volumes:
    - secrets:/secrets:ro

# Base healthcheck configuration
x-healthcheck-base: &healthcheck-base
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

services:
  bws-init:
    <<: *default-logging
    build:
      context: .
      dockerfile: bws-init/Dockerfile
    environment:
      - BWS_ACCESS_TOKEN
    volumes:
      - secrets:/secrets
    networks:
      - cerebruh

  redis:
    <<: *service-defaults
    image: redis:latest
    volumes:
      - redis-data:/data
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - cerebruh

  postgres:
    <<: *service-defaults
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=linkwarden
      - POSTGRES_USER=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - secrets:/secrets:ro
    command: |
      sh -c '
        while [ ! -f /secrets/.env ]; do
          echo "Waiting for secrets file..."
          sleep 1
        done
        export POSTGRES_PASSWORD=$$(grep CBRUH_POSTGRES_PASSWORD /secrets/.env | cut -d= -f2)
        echo "Starting postgres with password length: $${#POSTGRES_PASSWORD}"
        exec docker-entrypoint.sh postgres
      '
    user: postgres
    networks:
      - cerebruh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      bws-init:
        condition: service_completed_successfully

  astro:
    <<: *service-defaults
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cerebruh-web
    environment:
      <<: *common-env
      HOST: 0.0.0.0
      PORT: 3000
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    healthcheck:
      <<: *healthcheck-base
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
    networks:
      - cerebruh
    depends_on:
      - bws-init

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    volumes:
      - ./config/cloudflared:/etc/cloudflared:ro
    command: tunnel --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    networks:
      - cerebruh
    depends_on:
      - astro

networks:
  cerebruh:
    name: cerebruh

volumes:
  postgres-data:
  redis-data:
  secrets: